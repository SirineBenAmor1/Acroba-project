// Generated by gencpp from file acroba_workshop_sigma/MoveGoal.msg
// DO NOT EDIT!


#ifndef ACROBA_WORKSHOP_SIGMA_MESSAGE_MOVEGOAL_H
#define ACROBA_WORKSHOP_SIGMA_MESSAGE_MOVEGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace acroba_workshop_sigma
{
template <class ContainerAllocator>
struct MoveGoal_
{
  typedef MoveGoal_<ContainerAllocator> Type;

  MoveGoal_()
    : turtle_name()
    , speed(0.0)
    , distance(0.0)
    , isForward(false)  {
    }
  MoveGoal_(const ContainerAllocator& _alloc)
    : turtle_name(_alloc)
    , speed(0.0)
    , distance(0.0)
    , isForward(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _turtle_name_type;
  _turtle_name_type turtle_name;

   typedef float _speed_type;
  _speed_type speed;

   typedef float _distance_type;
  _distance_type distance;

   typedef uint8_t _isForward_type;
  _isForward_type isForward;





  typedef boost::shared_ptr< ::acroba_workshop_sigma::MoveGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::acroba_workshop_sigma::MoveGoal_<ContainerAllocator> const> ConstPtr;

}; // struct MoveGoal_

typedef ::acroba_workshop_sigma::MoveGoal_<std::allocator<void> > MoveGoal;

typedef boost::shared_ptr< ::acroba_workshop_sigma::MoveGoal > MoveGoalPtr;
typedef boost::shared_ptr< ::acroba_workshop_sigma::MoveGoal const> MoveGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::acroba_workshop_sigma::MoveGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::acroba_workshop_sigma::MoveGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::acroba_workshop_sigma::MoveGoal_<ContainerAllocator1> & lhs, const ::acroba_workshop_sigma::MoveGoal_<ContainerAllocator2> & rhs)
{
  return lhs.turtle_name == rhs.turtle_name &&
    lhs.speed == rhs.speed &&
    lhs.distance == rhs.distance &&
    lhs.isForward == rhs.isForward;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::acroba_workshop_sigma::MoveGoal_<ContainerAllocator1> & lhs, const ::acroba_workshop_sigma::MoveGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace acroba_workshop_sigma

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::acroba_workshop_sigma::MoveGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::acroba_workshop_sigma::MoveGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acroba_workshop_sigma::MoveGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acroba_workshop_sigma::MoveGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acroba_workshop_sigma::MoveGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acroba_workshop_sigma::MoveGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::acroba_workshop_sigma::MoveGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2a47ae3127332443b82523ac1ea8ff06";
  }

  static const char* value(const ::acroba_workshop_sigma::MoveGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2a47ae3127332443ULL;
  static const uint64_t static_value2 = 0xb82523ac1ea8ff06ULL;
};

template<class ContainerAllocator>
struct DataType< ::acroba_workshop_sigma::MoveGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acroba_workshop_sigma/MoveGoal";
  }

  static const char* value(const ::acroba_workshop_sigma::MoveGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::acroba_workshop_sigma::MoveGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#Define goal's message\n"
"string turtle_name\n"
"float32 speed\n"
"float32 distance\n"
"bool isForward\n"
;
  }

  static const char* value(const ::acroba_workshop_sigma::MoveGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::acroba_workshop_sigma::MoveGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.turtle_name);
      stream.next(m.speed);
      stream.next(m.distance);
      stream.next(m.isForward);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::acroba_workshop_sigma::MoveGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::acroba_workshop_sigma::MoveGoal_<ContainerAllocator>& v)
  {
    s << indent << "turtle_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.turtle_name);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "isForward: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isForward);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACROBA_WORKSHOP_SIGMA_MESSAGE_MOVEGOAL_H
