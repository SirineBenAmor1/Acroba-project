// Generated by gencpp from file acroba_workshop_sigma/PatrolSkillGoal.msg
// DO NOT EDIT!


#ifndef ACROBA_WORKSHOP_SIGMA_MESSAGE_PATROLSKILLGOAL_H
#define ACROBA_WORKSHOP_SIGMA_MESSAGE_PATROLSKILLGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace acroba_workshop_sigma
{
template <class ContainerAllocator>
struct PatrolSkillGoal_
{
  typedef PatrolSkillGoal_<ContainerAllocator> Type;

  PatrolSkillGoal_()
    : turtle_name()
    , move_distance(0.0)
    , move_speed(0.0)
    , rotate_angle(0.0)
    , repetitions(0)  {
    }
  PatrolSkillGoal_(const ContainerAllocator& _alloc)
    : turtle_name(_alloc)
    , move_distance(0.0)
    , move_speed(0.0)
    , rotate_angle(0.0)
    , repetitions(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _turtle_name_type;
  _turtle_name_type turtle_name;

   typedef float _move_distance_type;
  _move_distance_type move_distance;

   typedef float _move_speed_type;
  _move_speed_type move_speed;

   typedef float _rotate_angle_type;
  _rotate_angle_type rotate_angle;

   typedef int32_t _repetitions_type;
  _repetitions_type repetitions;





  typedef boost::shared_ptr< ::acroba_workshop_sigma::PatrolSkillGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::acroba_workshop_sigma::PatrolSkillGoal_<ContainerAllocator> const> ConstPtr;

}; // struct PatrolSkillGoal_

typedef ::acroba_workshop_sigma::PatrolSkillGoal_<std::allocator<void> > PatrolSkillGoal;

typedef boost::shared_ptr< ::acroba_workshop_sigma::PatrolSkillGoal > PatrolSkillGoalPtr;
typedef boost::shared_ptr< ::acroba_workshop_sigma::PatrolSkillGoal const> PatrolSkillGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::acroba_workshop_sigma::PatrolSkillGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::acroba_workshop_sigma::PatrolSkillGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::acroba_workshop_sigma::PatrolSkillGoal_<ContainerAllocator1> & lhs, const ::acroba_workshop_sigma::PatrolSkillGoal_<ContainerAllocator2> & rhs)
{
  return lhs.turtle_name == rhs.turtle_name &&
    lhs.move_distance == rhs.move_distance &&
    lhs.move_speed == rhs.move_speed &&
    lhs.rotate_angle == rhs.rotate_angle &&
    lhs.repetitions == rhs.repetitions;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::acroba_workshop_sigma::PatrolSkillGoal_<ContainerAllocator1> & lhs, const ::acroba_workshop_sigma::PatrolSkillGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace acroba_workshop_sigma

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::acroba_workshop_sigma::PatrolSkillGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::acroba_workshop_sigma::PatrolSkillGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acroba_workshop_sigma::PatrolSkillGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acroba_workshop_sigma::PatrolSkillGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acroba_workshop_sigma::PatrolSkillGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acroba_workshop_sigma::PatrolSkillGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::acroba_workshop_sigma::PatrolSkillGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "37fdf250aaf07f6708f88a411892b899";
  }

  static const char* value(const ::acroba_workshop_sigma::PatrolSkillGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x37fdf250aaf07f67ULL;
  static const uint64_t static_value2 = 0x08f88a411892b899ULL;
};

template<class ContainerAllocator>
struct DataType< ::acroba_workshop_sigma::PatrolSkillGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acroba_workshop_sigma/PatrolSkillGoal";
  }

  static const char* value(const ::acroba_workshop_sigma::PatrolSkillGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::acroba_workshop_sigma::PatrolSkillGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# The action goal for creating a rectangle\n"
"string turtle_name\n"
"float32 move_distance\n"
"float32 move_speed\n"
"float32 rotate_angle\n"
"int32 repetitions\n"
;
  }

  static const char* value(const ::acroba_workshop_sigma::PatrolSkillGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::acroba_workshop_sigma::PatrolSkillGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.turtle_name);
      stream.next(m.move_distance);
      stream.next(m.move_speed);
      stream.next(m.rotate_angle);
      stream.next(m.repetitions);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PatrolSkillGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::acroba_workshop_sigma::PatrolSkillGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::acroba_workshop_sigma::PatrolSkillGoal_<ContainerAllocator>& v)
  {
    s << indent << "turtle_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.turtle_name);
    s << indent << "move_distance: ";
    Printer<float>::stream(s, indent + "  ", v.move_distance);
    s << indent << "move_speed: ";
    Printer<float>::stream(s, indent + "  ", v.move_speed);
    s << indent << "rotate_angle: ";
    Printer<float>::stream(s, indent + "  ", v.rotate_angle);
    s << indent << "repetitions: ";
    Printer<int32_t>::stream(s, indent + "  ", v.repetitions);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACROBA_WORKSHOP_SIGMA_MESSAGE_PATROLSKILLGOAL_H
