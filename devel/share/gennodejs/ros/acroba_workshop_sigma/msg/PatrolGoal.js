// Auto-generated. Do not edit!

// (in-package acroba_workshop_sigma.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class PatrolGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.turtle_name = null;
      this.speed_move = null;
      this.distance = null;
      this.isForward = null;
      this.speed_rotate = null;
      this.degrees = null;
      this.isClockwise = null;
    }
    else {
      if (initObj.hasOwnProperty('turtle_name')) {
        this.turtle_name = initObj.turtle_name
      }
      else {
        this.turtle_name = '';
      }
      if (initObj.hasOwnProperty('speed_move')) {
        this.speed_move = initObj.speed_move
      }
      else {
        this.speed_move = 0.0;
      }
      if (initObj.hasOwnProperty('distance')) {
        this.distance = initObj.distance
      }
      else {
        this.distance = 0.0;
      }
      if (initObj.hasOwnProperty('isForward')) {
        this.isForward = initObj.isForward
      }
      else {
        this.isForward = false;
      }
      if (initObj.hasOwnProperty('speed_rotate')) {
        this.speed_rotate = initObj.speed_rotate
      }
      else {
        this.speed_rotate = 0.0;
      }
      if (initObj.hasOwnProperty('degrees')) {
        this.degrees = initObj.degrees
      }
      else {
        this.degrees = 0.0;
      }
      if (initObj.hasOwnProperty('isClockwise')) {
        this.isClockwise = initObj.isClockwise
      }
      else {
        this.isClockwise = false;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type PatrolGoal
    // Serialize message field [turtle_name]
    bufferOffset = _serializer.string(obj.turtle_name, buffer, bufferOffset);
    // Serialize message field [speed_move]
    bufferOffset = _serializer.float32(obj.speed_move, buffer, bufferOffset);
    // Serialize message field [distance]
    bufferOffset = _serializer.float32(obj.distance, buffer, bufferOffset);
    // Serialize message field [isForward]
    bufferOffset = _serializer.bool(obj.isForward, buffer, bufferOffset);
    // Serialize message field [speed_rotate]
    bufferOffset = _serializer.float32(obj.speed_rotate, buffer, bufferOffset);
    // Serialize message field [degrees]
    bufferOffset = _serializer.float32(obj.degrees, buffer, bufferOffset);
    // Serialize message field [isClockwise]
    bufferOffset = _serializer.bool(obj.isClockwise, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type PatrolGoal
    let len;
    let data = new PatrolGoal(null);
    // Deserialize message field [turtle_name]
    data.turtle_name = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [speed_move]
    data.speed_move = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [distance]
    data.distance = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [isForward]
    data.isForward = _deserializer.bool(buffer, bufferOffset);
    // Deserialize message field [speed_rotate]
    data.speed_rotate = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [degrees]
    data.degrees = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [isClockwise]
    data.isClockwise = _deserializer.bool(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += _getByteLength(object.turtle_name);
    return length + 22;
  }

  static datatype() {
    // Returns string type for a message object
    return 'acroba_workshop_sigma/PatrolGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '28f8b262499b05e0030c6536920d8221';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Define goal's message
    string turtle_name
    float32 speed_move
    float32 distance
    bool isForward
    float32 speed_rotate
    float32 degrees
    bool isClockwise
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new PatrolGoal(null);
    if (msg.turtle_name !== undefined) {
      resolved.turtle_name = msg.turtle_name;
    }
    else {
      resolved.turtle_name = ''
    }

    if (msg.speed_move !== undefined) {
      resolved.speed_move = msg.speed_move;
    }
    else {
      resolved.speed_move = 0.0
    }

    if (msg.distance !== undefined) {
      resolved.distance = msg.distance;
    }
    else {
      resolved.distance = 0.0
    }

    if (msg.isForward !== undefined) {
      resolved.isForward = msg.isForward;
    }
    else {
      resolved.isForward = false
    }

    if (msg.speed_rotate !== undefined) {
      resolved.speed_rotate = msg.speed_rotate;
    }
    else {
      resolved.speed_rotate = 0.0
    }

    if (msg.degrees !== undefined) {
      resolved.degrees = msg.degrees;
    }
    else {
      resolved.degrees = 0.0
    }

    if (msg.isClockwise !== undefined) {
      resolved.isClockwise = msg.isClockwise;
    }
    else {
      resolved.isClockwise = false
    }

    return resolved;
    }
};

module.exports = PatrolGoal;
