// Auto-generated. Do not edit!

// (in-package acroba_workshop_sigma.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class PatrolSkillGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.turtle_name = null;
      this.move_distance = null;
      this.move_speed = null;
      this.rotate_angle = null;
      this.repetitions = null;
    }
    else {
      if (initObj.hasOwnProperty('turtle_name')) {
        this.turtle_name = initObj.turtle_name
      }
      else {
        this.turtle_name = '';
      }
      if (initObj.hasOwnProperty('move_distance')) {
        this.move_distance = initObj.move_distance
      }
      else {
        this.move_distance = 0.0;
      }
      if (initObj.hasOwnProperty('move_speed')) {
        this.move_speed = initObj.move_speed
      }
      else {
        this.move_speed = 0.0;
      }
      if (initObj.hasOwnProperty('rotate_angle')) {
        this.rotate_angle = initObj.rotate_angle
      }
      else {
        this.rotate_angle = 0.0;
      }
      if (initObj.hasOwnProperty('repetitions')) {
        this.repetitions = initObj.repetitions
      }
      else {
        this.repetitions = 0;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type PatrolSkillGoal
    // Serialize message field [turtle_name]
    bufferOffset = _serializer.string(obj.turtle_name, buffer, bufferOffset);
    // Serialize message field [move_distance]
    bufferOffset = _serializer.float32(obj.move_distance, buffer, bufferOffset);
    // Serialize message field [move_speed]
    bufferOffset = _serializer.float32(obj.move_speed, buffer, bufferOffset);
    // Serialize message field [rotate_angle]
    bufferOffset = _serializer.float32(obj.rotate_angle, buffer, bufferOffset);
    // Serialize message field [repetitions]
    bufferOffset = _serializer.int32(obj.repetitions, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type PatrolSkillGoal
    let len;
    let data = new PatrolSkillGoal(null);
    // Deserialize message field [turtle_name]
    data.turtle_name = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [move_distance]
    data.move_distance = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [move_speed]
    data.move_speed = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [rotate_angle]
    data.rotate_angle = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [repetitions]
    data.repetitions = _deserializer.int32(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += _getByteLength(object.turtle_name);
    return length + 20;
  }

  static datatype() {
    // Returns string type for a message object
    return 'acroba_workshop_sigma/PatrolSkillGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '37fdf250aaf07f6708f88a411892b899';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # The action goal for creating a rectangle
    string turtle_name
    float32 move_distance
    float32 move_speed
    float32 rotate_angle
    int32 repetitions
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new PatrolSkillGoal(null);
    if (msg.turtle_name !== undefined) {
      resolved.turtle_name = msg.turtle_name;
    }
    else {
      resolved.turtle_name = ''
    }

    if (msg.move_distance !== undefined) {
      resolved.move_distance = msg.move_distance;
    }
    else {
      resolved.move_distance = 0.0
    }

    if (msg.move_speed !== undefined) {
      resolved.move_speed = msg.move_speed;
    }
    else {
      resolved.move_speed = 0.0
    }

    if (msg.rotate_angle !== undefined) {
      resolved.rotate_angle = msg.rotate_angle;
    }
    else {
      resolved.rotate_angle = 0.0
    }

    if (msg.repetitions !== undefined) {
      resolved.repetitions = msg.repetitions;
    }
    else {
      resolved.repetitions = 0
    }

    return resolved;
    }
};

module.exports = PatrolSkillGoal;
