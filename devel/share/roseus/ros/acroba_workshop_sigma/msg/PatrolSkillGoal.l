;; Auto-generated. Do not edit!


(when (boundp 'acroba_workshop_sigma::PatrolSkillGoal)
  (if (not (find-package "ACROBA_WORKSHOP_SIGMA"))
    (make-package "ACROBA_WORKSHOP_SIGMA"))
  (shadow 'PatrolSkillGoal (find-package "ACROBA_WORKSHOP_SIGMA")))
(unless (find-package "ACROBA_WORKSHOP_SIGMA::PATROLSKILLGOAL")
  (make-package "ACROBA_WORKSHOP_SIGMA::PATROLSKILLGOAL"))

(in-package "ROS")
;;//! \htmlinclude PatrolSkillGoal.msg.html


(defclass acroba_workshop_sigma::PatrolSkillGoal
  :super ros::object
  :slots (_turtle_name _move_distance _move_speed _rotate_angle _repetitions ))

(defmethod acroba_workshop_sigma::PatrolSkillGoal
  (:init
   (&key
    ((:turtle_name __turtle_name) "")
    ((:move_distance __move_distance) 0.0)
    ((:move_speed __move_speed) 0.0)
    ((:rotate_angle __rotate_angle) 0.0)
    ((:repetitions __repetitions) 0)
    )
   (send-super :init)
   (setq _turtle_name (string __turtle_name))
   (setq _move_distance (float __move_distance))
   (setq _move_speed (float __move_speed))
   (setq _rotate_angle (float __rotate_angle))
   (setq _repetitions (round __repetitions))
   self)
  (:turtle_name
   (&optional __turtle_name)
   (if __turtle_name (setq _turtle_name __turtle_name)) _turtle_name)
  (:move_distance
   (&optional __move_distance)
   (if __move_distance (setq _move_distance __move_distance)) _move_distance)
  (:move_speed
   (&optional __move_speed)
   (if __move_speed (setq _move_speed __move_speed)) _move_speed)
  (:rotate_angle
   (&optional __rotate_angle)
   (if __rotate_angle (setq _rotate_angle __rotate_angle)) _rotate_angle)
  (:repetitions
   (&optional __repetitions)
   (if __repetitions (setq _repetitions __repetitions)) _repetitions)
  (:serialization-length
   ()
   (+
    ;; string _turtle_name
    4 (length _turtle_name)
    ;; float32 _move_distance
    4
    ;; float32 _move_speed
    4
    ;; float32 _rotate_angle
    4
    ;; int32 _repetitions
    4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; string _turtle_name
       (write-long (length _turtle_name) s) (princ _turtle_name s)
     ;; float32 _move_distance
       (sys::poke _move_distance (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;; float32 _move_speed
       (sys::poke _move_speed (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;; float32 _rotate_angle
       (sys::poke _rotate_angle (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;; int32 _repetitions
       (write-long _repetitions s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; string _turtle_name
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setq _turtle_name (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
   ;; float32 _move_distance
     (setq _move_distance (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;; float32 _move_speed
     (setq _move_speed (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;; float32 _rotate_angle
     (setq _rotate_angle (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;; int32 _repetitions
     (setq _repetitions (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;;
   self)
  )

(setf (get acroba_workshop_sigma::PatrolSkillGoal :md5sum-) "37fdf250aaf07f6708f88a411892b899")
(setf (get acroba_workshop_sigma::PatrolSkillGoal :datatype-) "acroba_workshop_sigma/PatrolSkillGoal")
(setf (get acroba_workshop_sigma::PatrolSkillGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# The action goal for creating a rectangle
string turtle_name
float32 move_distance
float32 move_speed
float32 rotate_angle
int32 repetitions

")



(provide :acroba_workshop_sigma/PatrolSkillGoal "37fdf250aaf07f6708f88a411892b899")


